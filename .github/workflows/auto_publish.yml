# Tools to publish package to pypi automatically
# on update of project version.
# Will also update tags on automatic release.

name: "Publish package"

# don't allow multiple 'identical' processes to run. A second push should cancel the job from the first one.
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ github.event.inputs.pypi }}-${{ github.event.inputs.testpypi }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
        pypi:
          description: Force to pypi
          type: boolean
          default: false
        testpypi:
          description: Force to testpypi
          type: boolean
          default: false
  push:
    branches: [main]

jobs:

# run the tests first, if this fails nothing continues
  test:
    uses: ./.github/workflows/test.yml

  # run auto either if nothing explicit forced in workflow or it is a push event
  publish-auto:
    if: ${{ (github.event.inputs.testpypi == 'false' && github.event.inputs.pypi == 'false') || github.event_name == 'push' }}
    needs: test
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: Fetch repo name
        id: repo_name
        run: echo "::set-output name=value::$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"

      - id: get_status
        name: get_status
        run: |
          pip install toml
          PACKAGE_NAME=${{ steps.repo_name.outputs.value }}
          
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(python -c "
          import toml
          with open('pyproject.toml', 'r') as f:
              data = toml.load(f)
          print(data['project']['version'])
          ")
          
          # Check if package exists on PyPI
          if curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" > /dev/null 2>&1; then
            REMOTE_VERSION=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
            echo "remote_exists=true" >> $GITHUB_OUTPUT
            if [ "$CURRENT_VERSION" != "$REMOTE_VERSION" ]; then
              echo "version_difference=true" >> $GITHUB_OUTPUT
              echo "version_tags=v$CURRENT_VERSION $CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "version_difference=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "remote_exists=false" >> $GITHUB_OUTPUT
            echo "version_difference=true" >> $GITHUB_OUTPUT
            echo "version_tags=v$CURRENT_VERSION $CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Update git tags
        if: ${{ steps.get_status.outputs.remote_exists == 'true' && steps.get_status.outputs.version_difference == 'true'}}
        shell: bash
        run: |
            git config --global user.email "action@github.com"
            git config --global user.name "GitHub Action"
            git tag -f -a -m "Latest release" "latest"
            for val in $TAGS; do
              git tag -f -a -m "Release for $val" "$val"
            done
            git push -f --tags
        env:
          TAGS: ${{ steps.get_status.outputs.version_tags }}

      - name: Build and publish to pypi
        if: ${{ steps.get_status.outputs.remote_exists == 'true' && steps.get_status.outputs.version_difference == 'true'}}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/home/runner/.local/bin:$PATH"
          uv build
          uv publish --token $PYPI_TOKEN
        secrets:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  # run manual if one of the boolean buttons for workflow was used
  # this can force the initial creation of the package
  publish-manual:
    if: ${{ github.event.inputs.testpypi == 'true' || github.event.inputs.pypi == 'true' }}
    needs: test 
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2

      - name: Build and publish to pypi
        if: ${{ github.event.inputs.pypi == 'true' }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/home/runner/.local/bin:$PATH"
          uv build
          uv publish --token $PYPI_TOKEN
        secrets:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Build and publish to testpypi
        if: ${{ github.event.inputs.testpypi == 'true' }}
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/home/runner/.local/bin:$PATH"
          uv build
          uv publish --publish-url https://test.pypi.org/legacy/ --token $TEST_PYPI_TOKEN
        secrets:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}